# We need to setup different context root for the auth server so that we can store separate
# cookies for both the API gateway as well as the OAuth2 authorization server.
server:
  port: 8899
  contextPath: /userauth

eureka:
  client:
    serviceUrl:
      defaultZone: http://localhost:8761/eureka/

security:
  user:
    password: password

logging:
  level:
    org.springframework.security: DEBUG

# Datasource and JPA configuration to be used for storing the OAuth authorization details
# and token store
spring:
  datasource:
    url: jdbc:jdbc:h2:mem:auth
    username: sa
    password: password
    driver-class: org.h2.Driver

  jpa:
    database-platform: org.hibernate.dialect.H2Dialect
    show-sql: false
    hibernate:
      ddl-auto: create
# spring.datasource.url=jdbc:h2:mem:testdb
# spring.datasource.driverClassName=org.h2.Driver
# spring.datasource.username=sa
# spring.datasource.password=password
# spring.jpa.database-platform=org.hibernate.dialect.H2Dialect
---

spring:
  profiles: docker
# Datasource and JPA configuration to be used for storing the OAuth authorization details
# and token store
  datasource:
    url: jdbc:mysql://mysqldb:3306/auth
    username: root
    password: password
    driver-class: com.mysql.jdbc.Driver

  jpa:
    database-platform: org.hibernate.dialect.MySQLDialect
    show-sql: false
    hibernate:
      ddl-auto: create
eureka:
# Register our microservices to Eureka using hostnames in a Docker environment will not work, they will all get
# one and the same hostname. Instead we configure them to use its IP address during registration with Eureka.
  instance:
    preferIpAddress: true
  client:
    serviceUrl:
      defaultZone: http://eurekaregistry:8761/eureka/
